# Generated by Django 3.1 on 2021-08-29 10:06

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('patronymic', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.country')),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('updated', models.DateTimeField()),
            ],
            options={
                'ordering': ('-date', '-updated'),
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mask', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(default='', max_length=2), default=list, size=None)),
                ('flags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(default='', max_length=10), default=list, size=None)),
                ('team_title', models.CharField(max_length=250)),
                ('total', models.IntegerField(default=0)),
                ('position', models.IntegerField(default=0)),
                ('composite_mu', models.FloatField(default=0)),
                ('composite_sigma', models.FloatField(default=0)),
                ('winrate', models.FloatField(default=0)),
                ('teams_on', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('-tournament__end_datetime', '-tournament__start_datetime', '-tournament__id', '-total'),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=250)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Town',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.country')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rating.region')),
            ],
        ),
        migrations.CreateModel(
            name='Typeoft',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Monogames',
            fields=[
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='rating.team')),
                ('mono_games', models.IntegerField(default=0)),
                ('not_mono_games', models.IntegerField(default=0)),
                ('mono_d', models.FloatField(default=0)),
                ('not_mono_d', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Oldteamrating',
            fields=[
                ('result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='rating.result')),
                ('inRating', models.BooleanField(default=True)),
                ('b', models.IntegerField(default=0)),
                ('predictedPosition', models.IntegerField(default=0)),
                ('rt', models.IntegerField(default=0)),
                ('rb', models.IntegerField(default=0)),
                ('rg', models.IntegerField(default=0)),
                ('r', models.CharField(default='', max_length=50)),
                ('bp', models.IntegerField(default=0)),
                ('d1', models.IntegerField(default=0)),
                ('d2', models.IntegerField(default=0)),
                ('d', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('-result__tournament__end_datetime', '-result__tournament__start_datetime', '-result__tournament__id'),
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('town', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.town')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('questionQty', models.JSONField(default=dict, null=True)),
                ('teams', models.IntegerField(default=0)),
                ('orgcommittee', models.ManyToManyField(to='rating.Player')),
                ('typeoft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.typeoft')),
            ],
            options={
                'ordering': ('-end_datetime', '-start_datetime', '-id'),
            },
        ),
        migrations.AddField(
            model_name='team',
            name='town',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rating.town'),
        ),
        migrations.CreateModel(
            name='Syncrequest',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.venue')),
            ],
        ),
        migrations.AddField(
            model_name='result',
            name='syncrequest',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rating.syncrequest'),
        ),
        migrations.AddField(
            model_name='result',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.team'),
        ),
        migrations.AddField(
            model_name='result',
            name='teamMembers',
            field=models.ManyToManyField(to='rating.Player'),
        ),
        migrations.AddField(
            model_name='result',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.tournament'),
        ),
        migrations.CreateModel(
            name='Squad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games_counter', models.JSONField(default=dict, null=True)),
                ('mu', models.FloatField(default=0)),
                ('sigma', models.FloatField(default=0)),
                ('place', models.IntegerField(default=0)),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.release')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.team')),
                ('teamMembers', models.ManyToManyField(to='rating.Player')),
            ],
            options={
                'ordering': ('-release__date', '-mu'),
                'unique_together': {('team', 'release')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='result',
            unique_together={('team', 'tournament')},
        ),
        migrations.CreateModel(
            name='Releaserating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delta_mu', models.FloatField()),
                ('delta_sigma', models.FloatField()),
                ('mu', models.FloatField()),
                ('sigma', models.FloatField()),
                ('place', models.IntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.player')),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.release')),
            ],
            options={
                'ordering': ('-release__date', 'id'),
                'unique_together': {('player', 'release')},
            },
        ),
        migrations.CreateModel(
            name='Oldrating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0)),
                ('usedRating', models.IntegerField(default=0)),
                ('flag', models.CharField(default='', max_length=50, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.player')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.result')),
            ],
            options={
                'ordering': ('-result__tournament__end_datetime', '-result__tournament__start_datetime', '-result__tournament__id'),
                'unique_together': {('player', 'result')},
            },
        ),
        migrations.CreateModel(
            name='Newrating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delta_mu', models.FloatField()),
                ('delta_sigma', models.FloatField()),
                ('mu', models.FloatField()),
                ('sigma', models.FloatField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.player')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rating.result')),
            ],
            options={
                'ordering': ('-result__tournament__end_datetime', '-result__tournament__start_datetime', '-result__tournament__id'),
                'unique_together': {('player', 'result')},
            },
        ),
    ]
